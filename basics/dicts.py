"================словари================"
# dics - изменяемый, итерируемый, неупорядоченный, неиндексируемый тип данных, предназначенный для хранения данных в парах(ключ:значение)


# user = {    
#     'name': 'elina',
#     'age': '23',
#     'lastname':'kadyr'
# }
#print(user['name'])

#ключи в словаре будут уникальными, поэтому если в словарь добавить значениепо уже существующему ключу, то сохранится последнее значение
# dict1 = {'a':1, 'b':2, 'a':3}
#print(dict1)       #{'a': 3, 'b': 2}

#ключами могут быть только хешируемые типы данных(неизменяемые типы данных)
# print(hash(10))         #0
# print(hash('hello'))    #2678384365198195961
# print(hash([1,2,3]))    #unhashable type:'list'
# print(hash(     (1,2,3)     ))      #529344067295497451

# dict1 = {
#     105: 'some value',
#     'key1': 'some val 2',
#     (1,2,3): 'some val 3,
#     None: 'some val 4',
#     True: 'some val 5'
# }
# print
# dict2 = {
#     [1,2,3]:'hello'
# }

"===============Создание==============="
# dict1 = {'a':1, 'b':2, 'c':3}
# dict2 = dict([('a',1), ('b',2)]) #('a':1, 'b':2)

# list1 = ['a', 'b', 'c']
# list2 = [1,2,3]
# dict3 = dict(zip(list1, list2)) #{'a',1, 'b',2 'c':3}
# dict4 = {}
# dict4['name']

#get - метод, котрый принимает в себя ключ, если такой ключ есть - возвращает его значение, если такого ключа нет - возвращает None (или default значение)
#user['id'] # keyerror: 'id'
# user = {    
#      'name': 'elina',
#      'age': '23',
#      'lastname':'kadyr'
#  }
# user.get('id') #None
# user.get('name') #'elina'
# user.get('id', 10)

# a = {'a': 3, 'b': 2}
# res = {}
# for k, v in a.items():
#     a.sum(v)


dict1 = {'A': 1, 'B': 2, 'C': 3}
print(sum(dict1.values()))